import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import sys
import os
import asyncio
from datetime import datetime
import requests  # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–µ –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
import subprocess  # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
import time  # –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = '–í–∞—à —Ç–æ–∫–µ–Ω'
CHAT_ID = 'id —á–∞—Ç–∞'
IP_INFO_URL = 'http://ipinfo.io/{}/json'

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
bot = telegram.Bot(token=TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
request_data = {}

def get_local_ip():
    try:
        result = subprocess.run(['hostname', '-I'], capture_output=True, text=True)
        return result.stdout.strip().split()[0]
    except Exception as e:
        print(f"Error getting local IP: {e}")
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'

def get_hostname():
    try:
        result = subprocess.run(['hostname'], capture_output=True, text=True)
        return result.stdout.strip()
    except Exception as e:
        print(f"Error getting hostname: {e}")
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'

async def send_telegram_message(username, remote_ip, request_id):
    ip_info = {}
    try:
        response = requests.get(IP_INFO_URL.format(remote_ip))
        ip_info = response.json()
    except Exception as e:
        print(f"Error getting IP info: {e}")
        ip_info = {}

    city = ip_info.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    provider = ip_info.get('org', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    login_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    local_ip = get_local_ip()
    hostname = get_hostname()

    message = (f"üïí Login Time: {login_time}\n"
               f"üè† Hostname: {hostname}\n"
               f"üìç Remote IP: {remote_ip}\n"
               f"üåê System IP: {local_ip}\n"
               f"üîå Provider: {provider}\n"
               f"üèôÔ∏è City: {city}\n"
               f"üë§ Username: {username}")

    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("–†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"allow_{request_id}"),
         InlineKeyboardButton("–ó–∞–ø—Ä–µ—Ç–∏—Ç—å", callback_data=f"deny_{request_id}")]
    ])
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        sent_message = await bot.send_message(chat_id=CHAT_ID, text=message, reply_markup=reply_markup)
        print("Message sent.")
        return sent_message.message_id  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    except Exception as e:
        print(f"Error sending message: {e}")
        return None

async def delete_message(chat_id, message_id):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        print(f"Message {message_id} deleted.")
    except Exception as e:
        print(f"Error deleting message: {e}")

async def send_success_message(username, hostname, remote_ip, local_ip):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    """
    success_message = (f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è!\n"
                       f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                       f"üè† Hostname: {hostname}\n"
                       f"üìç Remote IP: {remote_ip}\n"
                       f"üåê System IP: {local_ip}")
    try:
        await bot.send_message(chat_id=CHAT_ID, text=success_message)
        print("Success message sent.")
    except Exception as e:
        print(f"Error sending success message: {e}")

async def send_failed_message(username, hostname, remote_ip, local_ip):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    """
    failed_message = (f"‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞!\n"
                      f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                      f"üè† Hostname: {hostname}\n"
                      f"üìç Remote IP: {remote_ip}\n"
                      f"üåê System IP: {local_ip}")
    try:
        await bot.send_message(chat_id=CHAT_ID, text=failed_message)
        print("Failed message sent.")
    except Exception as e:
        print(f"Error sending failed message: {e}")

async def main():
    global request_data
    username = os.getenv('PAM_USER')
    remote_ip = os.getenv('PAM_RHOST')

    if not username or not remote_ip:
        print("Missing username or remote IP.")
        sys.exit(1)

    request_id = str(int(datetime.now().timestamp()))
    request_data[request_id] = {'username': username, 'remote_ip': remote_ip, 'timestamp': datetime.now().isoformat()}

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    message_id = await send_telegram_message(username, remote_ip, request_id)

    update_id = None
    start_time = datetime.now()

    while True:
        try:
            if (datetime.now() - start_time).total_seconds() > 60:
                print("Exiting after 60 seconds.")
                sys.exit(1)

            updates = await bot.get_updates(offset=update_id, timeout=30)
            for update in updates:
                update_id = update.update_id + 1
                if update.callback_query:
                    callback_data = update.callback_query.data
                    if callback_data.startswith('allow_') or callback_data.startswith('deny_'):
                        req_id = callback_data.split('_')[1]
                        if req_id in request_data:
                            # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                            if message_id:
                                await delete_message(CHAT_ID, message_id)

                            if callback_data.startswith('allow_'):
                                del request_data[req_id]
                                print("Access allowed.")

                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                                local_ip = get_local_ip()
                                hostname = get_hostname()
                                await send_success_message(username, hostname, remote_ip, local_ip)

                                sys.exit(0)

                            elif callback_data.startswith('deny_'):
                                del request_data[req_id]
                                print("Access denied.")

                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                                local_ip = get_local_ip()
                                hostname = get_hostname()
                                await send_failed_message(username, hostname, remote_ip, local_ip)

                                sys.exit(1)
        except Exception as e:
            print(f"Exception occurred: {e}")
        await asyncio.sleep(1)

if __name__ == "__main__":
    print("Running script...")
    asyncio.run(main())
